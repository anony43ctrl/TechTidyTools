#include <windows.h>
#include <string>
#include <iostream>

bool GetDateFromUser(const std::wstring& prompt, SYSTEMTIME& st) {
    std::wcout << prompt;
    std::wcout << L"Enter the year (e.g., 2023): ";
    std::wcin >> st.wYear;
    std::wcout << L"Enter the month (1-12): ";
    std::wcin >> st.wMonth;
    std::wcout << L"Enter the day (1-31): ";
    std::wcin >> st.wDay;

    // Set the time to midnight (00:00:00.000)
    st.wHour = 0;
    st.wMinute = 0;
    st.wSecond = 0;
    st.wMilliseconds = 0;

    return true;
}

int main() {
    // directory path
    std::wstring folder;
    std::wcout << L"Enter the directory path: ";
    std::getline(std::wcin, folder);

    if (folder.back() != L'\\') {
        folder += L"\\";
    }

    // start and end times 
    SYSTEMTIME startTime = {0};
    SYSTEMTIME endTime = {0};

    GetDateFromUser(L"Enter the start date (year, month, day):\n", startTime);

    GetDateFromUser(L"\nEnter the end date (year, month, day):\n", endTime);

    // Convert SYSTEMTIME to FILETIME
    FILETIME ftStart = {0}, ftEnd = {0};
    SystemTimeToFileTime(&startTime, &ftStart);
    SystemTimeToFileTime(&endTime, &ftEnd);

    // Search for files in the folder
    WIN32_FIND_DATAW info;
    HANDLE handle = FindFirstFileW((folder + L"*").c_str(), &info);

    if (handle != INVALID_HANDLE_VALUE) {
        do {
            // Processes only files (not directories)
            if ((info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) == 0) {
                // Check if the file's last write time falls within the specified range
                if (CompareFileTime(&(info.ftLastWriteTime), &ftStart) >= 0 &&
                    CompareFileTime(&(info.ftLastWriteTime), &ftEnd) <= 0) {
                    
                    // Delete the file
                    std::wstring filePath = folder + info.cFileName;
                    if (DeleteFileW(filePath.c_str())) {
                        std::wcout << L"Deleted: " << filePath << std::endl;
                    } else {
                        std::wcerr << L"Failed to delete: " << filePath << std::endl;
                    }
                }
            }
        } while (FindNextFileW(handle, &info));

        FindClose(handle);
    } else {
        std::wcerr << L"Error: Unable to open directory " << folder << std::endl;
    }

    return 0;
}
